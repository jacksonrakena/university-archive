return(0)
}
remaining <- setdiff(1:3, c(contestant_choice, monty_choice))
if (doors[remaining] == "$10,000") {
return(10000)
}
return(0)
}
run_simulations <- function(strategy, num_plays) {
total_winnings <- 0
for (i in 1:num_plays) {
total_winnings <- total_winnings + simulate_monty_hall(strategy)
}
return(total_winnings / num_plays)
}
N <- 10000
# Simulate for each strategy
end_game_avg <- run_simulations("end_game", N)
stick_avg <- run_simulations("stick", N)
change_avg <- run_simulations("change", N)
# Print average winnings for each strategy
print(cat("Average winnings (End the game): $", run_simulations("end_game", N)))
cat("Average winnings (Stick with initial choice): $", stick_avg, "\n")
cat("Average winnings (Change doors): $", change_avg, "\n")
simulate_monty_hall <- function(strategy) {
doors <- c("$10,000", "Goat", "Goat")
contestant_choice <- sample(1:3, 1)
monty_choice <- sample(setdiff(1:3, contestant_choice), 1)
# If the strategy is to end the game and take $3,000
if (strategy == "end_game") {
return(3000)
}
if (strategy == "stick") {
if (doors[contestant_choice] == "$10,000") {
return(10000)
}
return(0)
}
remaining <- setdiff(1:3, c(contestant_choice, monty_choice))
if (doors[remaining] == "$10,000") {
return(10000)
}
return(0)
}
run_simulations <- function(strategy, num_plays) {
total_winnings <- 0
for (i in 1:num_plays) {
total_winnings <- total_winnings + simulate_monty_hall(strategy)
}
return(total_winnings / num_plays)
}
N <- 10000
# Simulate for each strategy
end_game_avg <- run_simulations("end_game", N)
stick_avg <- run_simulations("stick", N)
change_avg <- run_simulations("change", N)
cat("End the game: $", run_simulations("end_game", N), "\n")
cat("Stick with initial door choice: $", stick_avg, "\n")
cat("Change doors: $", change_avg, "\n")
simulate_monty_hall <- function(strategy) {
doors <- c("$10,000", "Goat", "Goat")
contestant_choice <- sample(1:3, 1)
monty_choice <- sample(setdiff(1:3, contestant_choice), 1)
# If the strategy is to end the game and take $3,000
if (strategy == "end_game") {
return(3000)
}
if (strategy == "stick") {
if (doors[contestant_choice] == "$10,000") {
return(10000)
}
return(0)
}
remaining <- setdiff(1:3, c(contestant_choice, monty_choice))
if (doors[remaining] == "$10,000") {
return(10000)
}
return(0)
}
run_simulations <- function(strategy, num_plays) {
total_winnings <- 0
for (i in 1:num_plays) {
total_winnings <- total_winnings + simulate_monty_hall(strategy)
}
return(total_winnings / num_plays)
}
N <- 10000
cat("End the game: $", run_simulations("end_game", N), "\n")
cat("Stick with initial door choice: $", run_simulations("stick", N), "\n")
cat("Change doors: $", run_simulations("change", N), "\n")
er.graph <- function(n, tprob = 0.5, mode = "digraph") {
# Initialize adjacency matrix
adjacency_matrix <- matrix(0, nrow = n, ncol = n)
# Generate edges
for (i in 1:n) {
for (j in 1:n) {
if (i != j) {
if (mode == "digraph") {
if (runif(1) <= tprob) {
adjacency_matrix[i, j] <- 1
}
} else if (mode == "graph" && i < j) {
if (runif(1) <= tprob) {
adjacency_matrix[i, j] <- 1
adjacency_matrix[j, i] <- 1
}
}
}
}
}
# Return adjacency matrix
return(adjacency_matrix)
}
# Example usage
set.seed(0)
er.graph(15, tprob = 0.2, mode = "graph")
er.graph(10, tprob = 0.7)
er.graph <- function(n, tprob = 0.5, mode = "digraph") {
# Initialize adjacency matrix
adjacency_matrix <- matrix(0, nrow = n, ncol = n)
# Generate edges
for (i in 1:n) {
for (j in 1:n) {
if (i != j) {
if (mode == "digraph") {
if (runif(1) <= tprob) {
adjacency_matrix[i, j] <- 1
}
} else if (mode == "graph" && i < j) {
if (runif(1) <= tprob) {
adjacency_matrix[i, j] <- 1
adjacency_matrix[j, i] <- 1
}
}
}
}
}
# Return adjacency matrix
return(adjacency_matrix)
}
"{r}
set.seed(0)
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
" -> my_code_string
cat(paste0("```", my_code_string, "```"))
set.seed(0)
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
set.seed(0)
simulate_monty_hall <- function(strategy) {
doors <- c("$10,000", "Goat", "Goat")
contestant_choice <- sample(1:3, 1)
monty_choice <- sample(setdiff(1:3, contestant_choice), 1)
# If the strategy is to end the game and take $3,000
if (strategy == "end_game") {
return(3000)
}
if (strategy == "stick") {
if (doors[contestant_choice] == "$10,000") {
return(10000)
}
return(0)
}
remaining <- setdiff(1:3, c(contestant_choice, monty_choice))
if (doors[remaining] == "$10,000") {
return(10000)
}
return(0)
}
run_simulations <- function(strategy, num_plays) {
total_winnings <- 0
for (i in 1:num_plays) {
total_winnings <- total_winnings + simulate_monty_hall(strategy)
}
return(total_winnings / num_plays)
}
N <- 10000
cat("End the game: $", run_simulations("end_game", N), "\n")
cat("Stick with initial door choice: $", run_simulations("stick", N), "\n")
cat("Change doors: $", run_simulations("change", N), "\n")
set.seed(0)
simulate_monty_hall <- function(strategy) {
doors <- c("$10,000", "Goat", "Goat")
contestant_choice <- sample(1:3, 1)
monty_choice <- sample(setdiff(1:3, contestant_choice), 1)
# If the strategy is to end the game and take $3,000
if (strategy == "end_game") {
return(3000)
}
if (strategy == "stick") {
if (doors[contestant_choice] == "$10,000") {
return(10000)
}
return(0)
}
remaining <- setdiff(1:3, c(contestant_choice, monty_choice))
if (doors[remaining] == "$10,000") {
return(10000)
}
return(0)
}
run_simulations <- function(strategy, num_plays) {
total_winnings <- 0
for (i in 1:num_plays) {
total_winnings <- total_winnings + simulate_monty_hall(strategy)
}
return(total_winnings / num_plays)
}
N <- 10000
cat("End the game: $", run_simulations("end_game", N), "\n")
cat("Stick with initial door choice: $", run_simulations("stick", N), "\n")
cat("Change doors: $", run_simulations("change", N), "\n")
marks <- 0
qnum <- 0
qmarks <- 7
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
qmarks <- 13
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
set.seed(0)
N = 10000
draw_cards <- function() {
deck <- c(1,1,1,1, rep(2:10, each = 4), rep(10, 12))
hand <- sample(deck, 2, replace = TRUE)
# If the hand is 21, blackjack
if (sum(hand) == 21) { return(TRUE) }
# If the hand is 10 + 1, the 1 can function as an 11, so blackjack
if (sum(hand) == 11 & 1 %in% hand) {
return(TRUE)
}
return(FALSE)
}
num_blackjacks <- sum(replicate(N, draw_cards()))
prob_blackjack <- num_blackjacks / N
prob_blackjack
set.seed(0)
waiting_customers <- function(lambda, customers, hours) {
waiting <- numeric(hours)
for (i in 1:hours) {
arrivals <- rpois(1, lambda)
waiting[i] <- max(0, waiting[i] + arrivals - customers)
if (i < hours) {
waiting[i+1] <- waiting[i]
}
}
return(waiting)
}
waiting_customers(3, 4, 8)
set.seed(0)
library(ggplot2)
replicate_simulation <- function(lambda, customers, hours, num_days) {
waiting_data <- matrix(0, nrow = num_days, ncol = hours)
for (i in 1:num_days) {
waiting_data[i,] <- waiting_customers(lambda, customers, hours)
}
return(waiting_data)
}
waiting_data <- replicate_simulation(3, 4, 8, 10000)
ggplot(data.frame(hour = 1:hours, mean_wait = apply(waiting_data, 2, mean)), aes(x = hour, y = mean_wait)) +
geom_line() +
geom_point() +
labs(x = "Hour of operation after opening", y = "Average number of customers waiting", title = "Average customers waiting at the end of each hour (n=10000 days)")
qmarks <- 10
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
set.seed(0)
simulate_monty_hall <- function(strategy) {
doors <- c("$10,000", "Goat", "Goat")
contestant_choice <- sample(1:3, 1)
monty_choice <- sample(setdiff(1:3, contestant_choice), 1)
# If the strategy is to end the game and take $3,000
if (strategy == "end_game") {
return(3000)
}
if (strategy == "stick") {
if (doors[contestant_choice] == "$10,000") {
return(10000)
}
return(0)
}
remaining <- setdiff(1:3, c(contestant_choice, monty_choice))
if (doors[remaining] == "$10,000") {
return(10000)
}
return(0)
}
run_simulations <- function(strategy, num_plays) {
total_winnings <- 0
for (i in 1:num_plays) {
total_winnings <- total_winnings + simulate_monty_hall(strategy)
}
return(total_winnings / num_plays)
}
N <- 10000
cat("End the game: $", run_simulations("end_game", N), "\n")
cat("Stick with initial door choice: $", run_simulations("stick", N), "\n")
cat("Change doors: $", run_simulations("change", N), "\n")
qmarks <- 10
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
er.graph <- function(n, tprob = 0.5, mode = "digraph") {
# Initialize adjacency matrix
adjacency_matrix <- matrix(0, nrow = n, ncol = n)
# Generate edges
for (i in 1:n) {
for (j in 1:n) {
if (i != j) {
if (mode == "digraph") {
if (runif(1) <= tprob) {
adjacency_matrix[i, j] <- 1
}
} else if (mode == "graph" && i < j) {
if (runif(1) <= tprob) {
adjacency_matrix[i, j] <- 1
adjacency_matrix[j, i] <- 1
}
}
}
}
}
# Return adjacency matrix
return(adjacency_matrix)
}
set.seed(0)
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
marks <- 0
qnum <- 0
qmarks <- 7
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
qmarks <- 13
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
set.seed(0)
N = 10000
draw_cards <- function() {
deck <- c(1,1,1,1, rep(2:10, each = 4), rep(10, 12))
hand <- sample(deck, 2, replace = TRUE)
# If the hand is 21, blackjack
if (sum(hand) == 21) { return(TRUE) }
# If the hand is 10 + 1, the 1 can function as an 11, so blackjack
if (sum(hand) == 11 & 1 %in% hand) {
return(TRUE)
}
return(FALSE)
}
num_blackjacks <- sum(replicate(N, draw_cards()))
prob_blackjack <- num_blackjacks / N
prob_blackjack
set.seed(0)
waiting_customers <- function(lambda, customers, hours) {
waiting <- numeric(hours)
for (i in 1:hours) {
arrivals <- rpois(1, lambda)
waiting[i] <- max(0, waiting[i] + arrivals - customers)
if (i < hours) {
waiting[i+1] <- waiting[i]
}
}
return(waiting)
}
waiting_customers(3, 4, 8)
set.seed(0)
library(ggplot2)
replicate_simulation <- function(lambda, customers, hours, num_days) {
waiting_data <- matrix(0, nrow = num_days, ncol = hours)
for (i in 1:num_days) {
waiting_data[i,] <- waiting_customers(lambda, customers, hours)
}
return(waiting_data)
}
waiting_data <- replicate_simulation(3, 4, 8, 10000)
ggplot(data.frame(hour = 1:8, mean_wait = apply(waiting_data, 2, mean)), aes(x = hour, y = mean_wait)) +
geom_line() +
geom_point() +
labs(x = "Hour of operation after opening", y = "Average number of customers waiting", title = "Average customers waiting at the end of each hour (n=10000 days)")
qmarks <- 10
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
set.seed(0)
simulate_monty_hall <- function(strategy) {
doors <- c("$10,000", "Goat", "Goat")
contestant_choice <- sample(1:3, 1)
monty_choice <- sample(setdiff(1:3, contestant_choice), 1)
# If the strategy is to end the game and take $3,000
if (strategy == "end_game") {
return(3000)
}
if (strategy == "stick") {
if (doors[contestant_choice] == "$10,000") {
return(10000)
}
return(0)
}
remaining <- setdiff(1:3, c(contestant_choice, monty_choice))
if (doors[remaining] == "$10,000") {
return(10000)
}
return(0)
}
run_simulations <- function(strategy, num_plays) {
total_winnings <- 0
for (i in 1:num_plays) {
total_winnings <- total_winnings + simulate_monty_hall(strategy)
}
return(total_winnings / num_plays)
}
N <- 10000
cat("End the game: $", run_simulations("end_game", N), "\n")
cat("Stick with initial door choice: $", run_simulations("stick", N), "\n")
cat("Change doors: $", run_simulations("change", N), "\n")
qmarks <- 10
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
er.graph <- function(n, tprob = 0.5, mode = "digraph") {
# Initialize adjacency matrix
adjacency_matrix <- matrix(0, nrow = n, ncol = n)
# Generate edges
for (i in 1:n) {
for (j in 1:n) {
if (i != j) {
if (mode == "digraph") {
if (runif(1) <= tprob) {
adjacency_matrix[i, j] <- 1
}
} else if (mode == "graph" && i < j) {
if (runif(1) <= tprob) {
adjacency_matrix[i, j] <- 1
adjacency_matrix[j, i] <- 1
}
}
}
}
}
# Return adjacency matrix
return(adjacency_matrix)
}
set.seed(0)
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
er.graph <- function(n, tprob = 0.5, mode = "digraph") {
result <- matrix(0, nrow = n, ncol = n)
for (i in 1:n) {
for (j in 1:n) {
if (i != j) {
if (mode == "digraph") {
if (runif(1) <= tprob) {
result[i, j] <- 1
}
} else if (mode == "graph" && i < j) {
if (runif(1) <= tprob) {
result[i, j] <- 1
result[j, i] <- 1
}
}
}
}
}
return(result)
}
set.seed(0)
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
set.seed(0)
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
set.seed(0)
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
set.seed(0)
er.graph(6.5)
er.graph(6, tprob = 1.1)
er.graph(6, tprob = 1, mode = 'directed')
er.graph(8, tprob = 0.2)
er.graph(8, tprob = 0.5, mode = 'graph')
